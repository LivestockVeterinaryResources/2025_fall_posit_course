---
title: "Explore Events"
editor: source
format: 
 html:
   embed-resources: true
   toc: true
   toc-location: left
execute:
    echo: false
    message: false
    warning: false
---

```{r}
library(tidyverse)
library(arrow)
library(dtplyr)
library(DT)

source('functions/DT_base.R') #functions to parse remarks and protocols

events_formatted<-read_parquet('data/intermediate_files/events_formatted.parquet')

summarize_events<-events_formatted |>
  group_by(event_type,  event) |>
  summarize(count_rows=sum(n()))|>
  ungroup()%>%
  mutate(event_type = factor(event_type),
         Event = factor(event))

summarize_events_by_location<-events_formatted |> 
  group_by(event_type, location_event, event) |> 
  summarize(count_rows=sum(n()))|>
  ungroup()%>%
  mutate(event_type = factor(event_type), 
         Event = factor(event))




```

## All events accross all herds

Events used less than 500 times are not reported here.


```{r}
#| fig-height: 8
# count y vars

facet_order <- summarize_events %>%
  group_by(event_type, event) %>%
  summarise(n_y = sum(n())) %>%
  arrange(desc(n_y)) %>%  # Order by most y categories
  pull(event_type)



```

### Heath Events


```{r}
# order events
summarize_events2 <- summarize_events %>%
  filter(event_type %in% 'health')%>%
  group_by(event_location, event)
  mutate(event = fct_reorder(event, count_rows, .fun = sum, .desc = FALSE)) 


ggplot(summarize_events2)+
  geom_bar(aes(x = event,
               y = count_rows, fill = location_event), stat = "identity")+
    facet_wrap(location_event ~., scales = 'free', nrow = 2)+

 # facet_wrap(factor(location_event, levels = facet_order) ~., scales = 'free', nrow = 2)+
  coord_flip()+
  scale_fill_viridis_d()+
  theme_minimal()+
  labs(x = "",
       y = "Row Count")+
  theme(legend.position = "none",
        # axis.text.y = element_text(size = 6)
        )
  
  
```


### Other Events


```{r}
# order events
summarize_events2 <- summarize_events %>%
  filter(!(event_type %in% c('unknown', 'repro', 'health')))%>%
  mutate(event = fct_reorder(event, count_rows, .fun = sum, .desc = FALSE)) 


ggplot(summarize_events2)+
  geom_bar(aes(x = event,
               y = count_rows, fill = location_event), stat = "identity")+
  facet_wrap(factor(event_type, levels = facet_order) ~., scales = 'free', nrow = 2)+
  coord_flip()+
  scale_fill_viridis_d()+
  theme_minimal()+
  labs(x = "",
       y = "Row Count")+
  theme(legend.position = "none",
        # axis.text.y = element_text(size = 6)
        )
  
  
```

### Unclassified Events


```{r}
# order events
summarize_events2 <- summarize_events %>%
  filter(event_type %in% 'unknown')%>%
  mutate(event = fct_reorder(event, count_rows, .fun = sum, .desc = FALSE)) 


ggplot(summarize_events2)+
  geom_bar(aes(x = event,
               y = count_rows, fill = location_event), stat = "identity")+
  facet_wrap(factor(event_type, levels = facet_order) ~., scales = 'free', nrow = 2)+
  coord_flip()+
  scale_fill_viridis_d()+
  theme_minimal()+
  labs(x = "",
       y = "Row Count")+
  theme(legend.position = "none",
        # axis.text.y = element_text(size = 6)
        )
  
  
```

## Events by Location


```{r}
get_locations<-sort(unique(events_formatted$location_event))
```

Locations reported: `r paste0(get_locations)`


<br>
### Events for each Herd


```{r}
#i=1
for (i in seq_along(get_locations)){
  
  plot_data<-summarize_events%>%
    filter(location_event %in% get_locations[[i]])
  
  
  facet_order_herd <- plot_data%>%
  group_by(event_type) %>%
  summarise(n_y = n_distinct(event)) %>%
  arrange(desc(n_y)) %>%  # Order by most y categories
  pull(event_type)
  
  
plot_data2 <- plot_data %>%
  mutate(event = fct_reorder(event, count_rows, .fun = sum, .desc = FALSE)) 

  p<-ggplot(plot_data2)+
  geom_bar(aes(x = event,
               y = count_rows, fill = event_type), stat = "identity")+
  facet_wrap(factor(event_type, levels = facet_order) ~., scales = 'free', nrow = 2)+
  coord_flip()+
  scale_fill_viridis_d()+
  theme_minimal()+
  labs(x = "",
       y = "Row Count", 
       title = paste0(get_locations[[i]]))+
  theme(legend.position = "none",
        # axis.text.y = element_text(size = 6)
        )
  
  print(p)
  
}

```

# Table of events by Herd

```{r}
fxn_DT_base(summarize_events%>%mutate(location_event = factor(location_event)))
```




