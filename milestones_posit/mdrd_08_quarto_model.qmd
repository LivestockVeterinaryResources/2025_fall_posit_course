---
title: Analyze Data
format: html
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE)
.groups <-  c("class", "groups", "names")

# Load your packages here

```

## Analyze Data

In this milestone, you'll create a linear regression model that uses some of the variables we have explored to predict the change in GFR over time. 


## Recreation

### Part 1 - Import

As always, let's begin by importing our data. In the code chunk below, import both of our data sets from the `data/` directory:

1. `mdrd.csv`, save it as `mdrd`
2. `supp.csv`, save it as `supp`


```{r}
#| label: recreation-import
# DO NOT INSTALL TIDYVERSE PACKAGES
# Remember that all tidyverse packages have already been installed for you, and
# some have been loaded; but you will need to *load* the ones you want to use.
# As a best practice when working within a Quarto document like this one,
# load any packages you will use within the code chunk labeled `setup` at the
# top of the file.
```

### Part 2 - Prepare the data

Run the code below to recreate the variables we have made in previous milestones. You can use these variables, and more, in your EDA exploration or regression model. Notice that we are only including participants who did *not* drop out of the study. 


```{r}
#| label: prep-model-input
treatments <- 
  mdrd %>%
  filter(dropout != 1) %>% 
  pivot_longer(
    cols = starts_with("diet"),
    names_to = "treatment",
    values_to = "value"
  ) %>%
  filter(value == 1) %>%
  separate(
    col = treatment, 
    into = c("diet", "bp"),
    sep = "_"
  ) %>%
  mutate(
    diet = str_remove(diet, "^diet"),
    bp = str_remove(bp, "bp$")
  ) %>%
  mutate(
    diet = if_else(diet == "k", "very low-protein", "low-protein"),
    bp = if_else(bp == "norm", "normal", bp)
  ) %>%
  group_by(diet, bp, ptid) %>%
  summarize(
    gfr_slope = (last(gfr, order_by = months) - first(gfr, order_by = months)) / max(months),
  ) %>%
  filter(!is.nan(gfr_slope)) %>%
  ungroup() %>%
  left_join(supp, by = "ptid")

treatments
```

### Part 3 - Track A (Exploratory Data Analysis)

We want to examine how our response variable, `gfr_slope`, relates to a set of explanatory variables: `age`, `bp`, `diet`, and `sex`.

Below are four plots exploring these relationships.  Recreate the scatterplot, and your choice of one (or more) of the column plots.


```{r}
#| label: recreate-this-eda
#| message: false
knitr::include_graphics("images/milestone08a.png")
knitr::include_graphics("images/milestone08_combo.png")
```

```{r}
#| label: recreation-1a

```

```{r}
#| label: recreation-1b

```

Take time to consider these graphs and what questions you have; you will build on these for your extension.


## Extension (Track A: EDA)

**Remember** EDA is iterative - answering one question often leads to another. Document your iterative process in your code.

Using the code chunk below, investigate the data further, using the skills you have learned this week and in previous weeks of Academy. Some ideas:

1. Use at least three related graphs to investigate a variable (or variables) of interest in this data. Your approach should be iterative (graph 2 builds on graph 1) and move you toward better understanding a question of your choosing.
2. Summarize the dataset in a new way to investigate the effects of diet on GFR for different groups of individuals.

Alternately, working with a data set of your own, complete the following:

1. Read in your data
2. Imagine that you are encountering this data for the first time; conduct EDA on your data. In your work, you should:
    a. Provide relevant summary measures of your data
    b. Ask and answer at *least two* questions of your data, using at least two plots (consider using faceting and aesthetics to visualize patterns)



```{r}
#| label: extension-a

```

### Part 3 - Track B (Modeling) 

#### Fit the model

Use `treatments` to fit a model that uses linear regression to predict change in GFR over time (i.e., `gfr_slope`) based on:

* Blood pressure treatment group
* Diet treatment group
* Age
* Sex

Work in the code chunk below. Save the result as `mod`, we will use it below.


```{r}
#| label: recreation-model

```

Run the following code chunk to test whether you have the same answer as the solution:


```{r}
#| label: compare
#| eval: false
waldo::compare(
  coef(mod), 
  coef(readr::read_rds("assets/milestone08.RDS")), 
  ignore_function_env = TRUE,
  tolerance = 1e-4
)
```

#### The model estimates

Run the code below to see a table.


```{r}
#| label: recreate-this-1
#| message: false
solution_1 <- readr::read_csv("data/milestone08a.csv")
solution_1
```

Your task is to use what you've learned about the broom package to transform `mod` into this table. Work in the code chunk below. Save your result as `estimates`.


```{r}
#| label: recreation-estimates
# The broom package has been installed, but not loaded.
```

Run the following code chunk to test whether you have the same answer as the solution:


```{r}
#| label: compare-1
#| eval: false
waldo::compare(estimates, solution_1, tolerance = 1e-4, ignore_attr = .groups)
```

How do you interpret the results?


#### Evaluate the model fit

Run the code below to see a table.


```{r}
#| label: recreate-this-2
#| message: false
solution_2 <- readr::read_csv("data/milestone08b.csv")
solution_2
```

Your task is to transform `mod` into this table. Work in the code chunk below. Save your result as `model_statistics`.


```{r}
#| label: recreation-statistics

```

Run the following code chunk to test whether you have the same answer as the solution:


```{r}
#| label: compare-2
#| eval: false
waldo::compare(model_statistics, solution_2, tolerance = 1e-4, ignore_attr = .groups)
```

#### Generating predictions

The chunk below generates eight example patients.  Run the chunk to see the patients.


```{r}
#| label: generate-example-data
cases <- 
  expand_grid(
    diet = c("low-protein", "very low-protein"),
    bp = c("low", "normal"),
    age = 70,
    sex = c("M", "F")
  )
cases
```

Run the code below to see a table. It displays the model's predictions for each example patient.


```{r}
#| label: recreate-this-3
#| message: false
solution_3 <- readr::read_csv("data/milestone08c.csv")
solution_3
```

Your task is to use what you've learned about the broom package to create this table. Work in the code chunk below. Save your result as `predictions`. (*Hint* Use the `broom::augment()` function with the `newdata` argument.)


```{r}
#| label: recreation-predictions

```

Run the following code chunk to test whether you have the same answer as the solution:


```{r}
#| label: compare-3
#| eval: false
waldo::compare(predictions, solution_3, tolerance = 1e-4, ignore_attr = .groups)
```

## Extension (Track B: Modeling)

Using the code chunk below, investigate the data further, using the skills you have learned this week and in previous weeks of Academy. Some ideas:

1. Repeat your modeling with a different variable or set of variables; how well does your new model perform, and how can you tell? For example, is there an interaction between diet and blood pressure group?
2. Visualize your model output from the recreation.
3. Explore other relationships in the data with other models
4. [Anything else]

Alternately, working with a data set of your own, complete the following:

1. Read in your data
2. Wrangle your data so it is in a format that is ready for modeling
3. Create a simple regression model and inspect your model results using functions from the broom package


```{r}
#| label: extension-b

```

