---
title: "Step 2 Create intermediate files"
format: html
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
library(tidyverse)
library(arrow)
library(dtplyr)

source('functions/fxn_lag_master.R')


```

#read in file
```{r}
events2<-read_parquet('data/intermediate_files/events_formatted.parquet')|>
  #filter(!(is.na(bdat)))|> 
  mutate(data_pull_date_min = min(date_event, na.rm = TRUE))|>
  mutate(data_pull_date_max = max(date_event, na.rm = TRUE))|>
  rowid_to_column()

```

#animals events
```{r}
#animals - each row is an animal------------
animals<-events2|>
  group_by(id_animal, date_birth, 
           source_farm, source_state, #optional
           data_pull_date_min, data_pull_date_max)|>
  summarize(breed = paste0(sort(unique(breed)), collapse = ','))|>
  ungroup()

#enrolled - each row is an animal------------
enrolls<-events2|>
  group_by(id_animal)|>
  summarize(date_enrolled = min(date_event), 
            date_enrolled_max = max(date_event))|>
  ungroup()|>
  distinct()|>
  mutate(qc_date_enrolled = as.numeric(date_enrolled_max-date_enrolled))


#deads - each row is animal
deads<-events2|>
  filter(event == 'DIED')|>
  group_by(id_animal)|>
  summarize(date_died = min(date_event), 
            date_died_max = max(date_event))|>
  ungroup()|>
  distinct()|>
  mutate(qc_date_died_diff = as.numeric(date_died_max-date_died))

#solds - each row is animal
solds<-events2|>
  filter(event == 'SOLD')|>
  group_by(id_animal)|>
  summarize(date_sold = min(date_event), 
            date_sold_max = max(date_event))|>
  distinct()|>
  mutate(date_sold_diff = as.numeric(date_sold_max-date_sold))

#------------------------------------------------
master_animals<-animals|>
  left_join(enrolls)|>
  left_join(solds)|>
  left_join(deads)

write_parquet(master_animals, 'data/intermediate_files/animals.parquet')

```

#animal lactation events
```{r}
#animal_lactations - each row is an animal/lactation----------
animal_lactations<-events2|>
  group_by(id_animal, id_animal_lact, lact_number)|>
  summarize(date_lact_first_event = min(date_event), 
            date_lact_last_event = max(date_event))|>
  ungroup()

#archives - each row is animal/lactation
archives<-events2|>
  select(id_animal_lact, date_archived)|>
  distinct()|>
  group_by(id_animal_lact)|>
  summarize(date_archive = min(date_archived), 
            date_archive_max = max(date_archived))|>
  distinct()|>
  mutate(date_archive_diff = as.numeric(date_archive_max-date_archive))

#freshs - each row is animal/lactation------------
freshs<-events2|>
  filter(event == 'FRESH')|>
  group_by(id_animal_lact)|>
  summarize(date_fresh = min(date_event), 
            date_fresh_max = max(date_event))|>
  distinct()|>
  mutate(qc_date_fresh_diff = as.numeric(date_fresh_max-date_fresh))



#drys - each row is animal/lacatation
drys<-events2|>
  filter(event == 'DRY')|>
  group_by(id_animal_lact)|>
  summarize(date_dry = min(date_event), 
            date_dry_max = max(date_event))|>
  distinct()|>
  mutate(date_dry_diff = as.numeric(date_dry_max-date_dry))

#master animal_lactation events-----------------

master_animal_lactations<-animal_lactations|>
  left_join(freshs)|>
  left_join(drys)|>
  left_join(archives)

write_parquet(master_animal_lactations, 'data/intermediate_files/animal_lactations.parquet')


```

#***Insert Lag Code Here***
```{r lag_code}
source('FUNCTIONS/fxn_lag_master.R')




arrange_vars <- alist(tag, eid, date) #removed: Reason2, Disease, we need a "stop if list contains 'lag'

sort_vars <- c('tag', 'eid') #removed:"Reason2", "Disease",

#Gap1 ----------------------

set_outcome_gap<- 1

df_1<-test_fxn1(x = treats%>%
                  mutate(date = Date),
                arrange_var = arrange_vars,
                mutate_var = sort_vars,
                prefix = "g1_",
                gap = set_outcome_gap)%>% #gap set to identify regimens
  rename(g1_key = key,
         g1_date_gap = date_gap,
         g1_ct = lag_ct)%>%
  select(-(contains('lag')))%>%
  group_by(tag, eid, g1_key)%>%
  mutate(g1_pull_ct = 1:n(), 
         g1_pull_ct_max = sum(n()))%>%
  ungroup()%>%
  mutate(g1_outcome = case_when(
    (g1_pull_ct < g1_pull_ct_max)~'Retreat', 
    (g1_pull_ct == g1_pull_ct_max)~'Final Tx', 
    TRUE~'Error')
  )



# animal level  --------------

## all health events  
```{r}
#
health_animal_level<-events2|>
  filter(event_type %in% 'health')|>
  filter(!(is.na(id_animal)))|>
  filter(!(is.na(event)))|>
  arrange(id_animal, event, date_event)|>
  group_by(id_animal, event)|>
  mutate(event_ct_animal = 1:n(), 
         event_ct_animal_txt = paste0(event, event_ct_animal)
         )|>
  ungroup()|>
  select(id_animal, date_event,  event_ct_animal_txt)|>
  distinct()|>
  pivot_wider(names_from = event_ct_animal_txt, 
              values_from = date_event)|>
  distinct()

write_parquet(health_animal_level, 'data/intermediate_files/health_events_wide.parquet')

```

## specific health events  
```{r}
select_event<-'MAST'
#
select_event_animal_level<-events2|>
  filter(event %in% select_event)|>
  filter(!(is.na(id_animal)))|>
  filter(!(is.na(event)))|>
  arrange(id_animal, event, date_event)|>
  group_by(id_animal, event)|>
  mutate(event_ct_animal = 1:n(), 
         event_ct_animal_txt = paste0(event, event_ct_animal)
         )|>
  ungroup()|>
  select(id_animal, date_event,  event_ct_animal_txt)|>
  distinct()|>
  pivot_wider(names_from = event_ct_animal_txt, 
              values_from = date_event)|>
  distinct()

write_parquet(select_event_animal_level, paste0('data/intermediate_files/', select_event, '_events_animal_level_wide.parquet'))

```
