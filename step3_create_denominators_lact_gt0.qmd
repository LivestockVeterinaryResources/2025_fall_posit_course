---
title: "Denominators Calculation"
format: html
editor: source
execute:
    echo: false
    message: false
    warning: false
---

```{r}
library(tidyverse)
library(arrow)
library(dtplyr)

source('functions/DT_base.R')

```

```{r}
#denominator base files -------------------
animals<-read_parquet('data/intermediate_files/animals.parquet') #each row is an animal

animal_lactations<-read_parquet('data/intermediate_files/animal_lactations.parquet') #each row is an animal lactation


#---------------------------
data_pull_min<-min(animals$data_pull_date_min)
data_pull_max<-max(animals$data_pull_date_max)
```


# Gerard's Attempt - by lactation

```{r}
# function for above to allow date range 

# setes data to be use
label_deno <- "2024"
date_start_deno <- "2024-01-01"
date_end_deno <- "2024-12-31"

# data set create function
fxn_create_deno <- function(label = label_deno,
                            date_start = date_start_deno,
                            date_end = date_end_deno){
# needs error checks  
  time_period_text <- label
date_start <- ymd(date_start)
date_end <- ymd(date_end)


# to get cows with dates in window
deno <- animal_lactations |>
  select(id_animal, 
         id_animal_lact, 
         lact_number, lact_group, lact_group_basic,
         date_fresh, date_archive, date_archive_max) |> 
  # get cull date
  group_by(id_animal) |> 
  mutate(date_left = max(date_archive_max)) |> 
  ungroup() |> 
  # create 5 lact groupp
  mutate (lact_group_5 = case_when(
      (lact_number == 0) ~ 'Heifer', 
      (lact_number == 1) ~ 'LACT 1',
      (lact_number == 2) ~ 'LACT 2',
      (lact_number == 3) ~ 'LACT 3',
      (lact_number == 4) ~ 'LACT 4',
      (lact_number >4) ~ 'LACT 5+',
      .default = 'Unknown')
  ) |> 
  #this works for test, but we need to come back to it to see if can integrate into workflow
  mutate(time_period = time_period_text) |> 
  # removes heifers
  filter(lact_number>0) |>  
  # keeps cows with not culled or cows fresh before end
  # filter(is.na(date_left) & date_fresh <= date_end | date_fresh <= date_end) |> 
  filter(date_fresh <= date_end) |>
  filter(is.na(date_archive) | date_archive >=  date_start) |> 
  # filters cows fresh before start date
  filter(date_fresh <= date_start & date_archive >= date_start |
           date_fresh <= date_start & is.na(date_left) |
  # filters cows fresh after start date
    date_fresh >= date_start & date_archive <= date_end |
           date_fresh >= date_start & is.na(date_left)
         )
}

# test example
denominators <- fxn_create_deno()
 
```


```{r}
# denon processing function

fxn_calc_deno <- function(data = denominators){
  
# create lactation groups denominators
deno_all_lacts <- data |> 
  group_by(time_period, lact_group_basic) |>  
  summarize(count_animals = n_distinct(id_animal), 
            count_lactations = n_distinct(id_animal_lact))|>
  ungroup()%>%
 rename(`Lactation Group` = lact_group_basic )

deno_by_lact_group <- data |>
  group_by(time_period,  lact_group)|>
  summarize(count_animals = n_distinct(id_animal), 
            count_lactations = n_distinct(id_animal_lact)) |>
  ungroup() %>%
 rename(`Lactation Group` = lact_group)

# create more lact groups
deno_by_lact_group_5 <- data |>
  group_by(time_period,  lact_group_5)|>
  summarize(count_animals = n_distinct(id_animal), 
            count_lactations = n_distinct(id_animal_lact)) |>
  ungroup() %>%
  rename('Lactation Group' = lact_group_5)

herd_deno <- bind_rows(deno_all_lacts, 
                  deno_by_lact_group, 
                  deno_by_lact_group_5) |> 
  distinct()

}

herd_deno <- fxn_calc_deno(denominators)

# save file
write_parquet(herd_deno, 'data/intermediate_files/herd_denominators.parquet')



```

# Table of Herd denominator data
This is data from the **herd_denominators.parquet** in intermediate files

```{r}
fxn_DT_base(herd_deno)
```


# Example report

```{r}
# can do multiple years or time periods by combining the above

denominators_yr1 <- fxn_create_deno(label = "2023",
                        date_start = "2023-01-01",
                        date_end = "2023-12-31") |> 
  fxn_calc_deno()

denominators_yr2 <- fxn_create_deno(label = "2024",
                        date_start = "2024-01-01",
                        date_end = "2024-12-31") |> 
  fxn_calc_deno()

deno_2yrs <- bind_rows(denominators_yr1, denominators_yr2)

ggplot(data = deno_2yrs, aes(x = `Lactation Group`, y = count_animals,
                             fill = `Lactation Group`))+
  geom_col()+
  scale_fill_viridis_d()+
  facet_wrap(vars(time_period))+
  theme_minimal()+
  theme(legend.position = "",
        axis.text.x = element_text(angle = 45, hjust = 1)
        )+
  labs(x = "")
  


```

# DIM calculations

```{r}
# function to create data set used to calc DIM denominators

interval_days = 30

# 13 categories gives upto 390
fxn_dim_data <- function(data, date_start = date_start_deno,
                                  date_end = date_end_deno,
                         interval = interval_days) {
  # convert dates
  date_start <- ymd(date_start)
  date_end <- ymd(date_end)

  data <- data |> 
    mutate(dim_start = as.numeric(case_when(date_fresh > date_start ~ NA,
                                            date_fresh < date_start ~ 
                                              date_start - date_fresh)
                                  ),
           dim_end = as.numeric(case_when(is.na(date_archive)~ 
                                            date_end - date_fresh,
                                          .default = date_archive - date_fresh)
                                ),
           dim_start = if_else(is.na(dim_start), 0, dim_start),
           dim_start_cat = ceiling(dim_start / interval),
           dim_end_cat = ceiling(dim_end / interval)
           )
}

fxn_dim_groups <- function(data, num_categories = 13, 
                                  interval = interval_days){
  
  # Generate `dim_` categories dynamically
  for (i in seq_len(num_categories)) {
    col_name <- paste0("dim_", (i-1) * interval, "_", i * interval)
    data <- data |> 
      mutate(!!col_name := if_else(dim_start_cat <= i & dim_end_cat >= i, 1, 0))
  }
  
    # Add the n+1 th category for cows with DIM > (num_categories * interval)
  col_name_extra <- paste0("dim_", num_categories * interval, "_+")
  data <- data |> 
    mutate(!!col_name_extra := if_else(dim_end_cat > num_categories, 1, 0))
  
  return(data)
}


# create data set
deno_dim <- fxn_create_deno() |> 
  fxn_dim_data() |> 
  fxn_dim_groups(num_categories = 13)  

# fxn to calculate
fxn_deno_dim <- function(data = deno_dim, lact_group_var){
  
  data <- data |> 
  select(-c(dim_start, dim_end, dim_end_cat, dim_start_cat)) |> 
  group_by(time_period, {{ lact_group_var }}) |> 
  summarise(across(contains("dim_"), ~ sum(. == 1, na.rm = TRUE))) |> 
  ungroup() |> 
  pivot_longer(cols = -c(time_period, {{ lact_group_var }}), 
               names_to = "DIM", 
               values_to = "count") |> 
  rename(`Lactation Group` = {{ lact_group_var }} )
  
}

# create dim df
deno_dim_all <- fxn_deno_dim(deno_dim, lact_group_basic)
deno_dim_3 <- fxn_deno_dim(deno_dim, lact_group)
deno_dim_5 <- fxn_deno_dim(deno_dim, lact_group_5)


herd_deno_dim <- bind_rows(deno_dim_all, 
                  deno_dim_3, 
                  deno_dim_5) |> 
  distinct() |> 
  #set up for later graphing
  mutate(DIM = str_remove(DIM, "dim_"),
         DIM = fct_inorder(DIM)
         )


# save data
write_parquet(herd_deno_dim, 'data/intermediate_files/herd_dim_denominators.parquet')
```
# Table of DIM denominator data
This is data from the **herd_dim_denominators.parquet** in intermediate files

```{r}
fxn_DT_base(herd_deno_dim)
```


# Example report

```{r}

# test graph
ggplot(data = herd_deno_dim)+
  aes(x = DIM, y = count,
      fill = DIM)+
  geom_col()+
  scale_fill_viridis_d()+
  facet_wrap(vars(`Lactation Group`))+
  theme_minimal()+
  theme(legend.position = "",
        axis.text.x = element_text(angle = 45, hjust = 1)
        )+
  labs(x = "",
       y = "")

```




# Season needs work still

```{r}

# to caculate inventory for each month

data <- data |> 
    mutate(season_start = as.numeric(case_when(date_fresh > date_start ~ NA,
                                            date_fresh < date_start ~ 
                                              date_start - date_fresh)
                                  ),
           dim_end = as.numeric(case_when(is.na(date_archive)~ 
                                            date_end - date_fresh,
                                          .default = date_archive - date_fresh)
                                ),
           dim_start = if_else(is.na(dim_start), 0, dim_start),
           dim_start_cat = ceiling(dim_start / interval),
           dim_end_cat = ceiling(dim_end / interval)
    )



```


<!-- # to get months -->

<!-- # idea -->

<!-- # extract month adn year from end and start and fresh and archive then write cod using year as group and month as case_whens. -->

<!-- # floor_date() -->

<!-- test_month <- test |> -->
<!--   select(id_animal, id_animal_lact, date_archive_max, lact_group) |> -->
<!--   mutate(January = 1, -->
<!--          February = case_when(is.na(date_archive_max) ~ 1, -->
<!--                              date_archive_max <= "2024-01-31" ~ 0, -->
<!--                              .default = 1), -->
<!--          March = case_when(is.na(date_archive_max) ~ 1, -->
<!--                              date_archive_max <= "2024-02-28" ~ 0, -->
<!--                              .default = 1) -->
<!--   ) -->


<!-- # summarize -->
<!-- test_summary_month <- test_month |> -->
<!--   summarise(across(January:March, ~ sum(. == 1, na.rm = TRUE))) |> -->
<!--   pivot_longer(cols = everything(), -->
<!--                names_to = "Month", -->
<!--                values_to = "Count") -->

<!-- test_summary_month_lact <- test_month |> -->
<!--   group_by(lact_group) |> -->
<!--   summarise(across(January:March, ~ sum(. == 1, na.rm = TRUE))) |> -->
<!--   ungroup() |> -->
<!--   pivot_longer(cols = -(lact_group), -->
<!--                names_to = "Month", -->
<!--                values_to = "Count") -->


<!-- ``` -->

