---
title: "Disease Template"
format: html
editor: source
execute:
    echo: false
    message: false
    warning: false
---

```{r}
library(tidyverse)
library(arrow)
library(dtplyr)

source('functions/DT_base.R')

```

```{r}
#denominator base files -------------------
animals<-read_parquet('data/intermediate_files/animals.parquet') #each row is an animal

animal_lactations<-read_parquet('data/intermediate_files/animal_lactations.parquet') #each row is an animal lactation

#numerator base files long ----------------------each row is a unique disease event (gapx_key)
disease_animal_long<-read_parquet('data/intermediate_files/disease_animal_level_long.parquet')

disease_lact_long<-read_parquet('data/intermediate_files/disease_lactation_level_long.parquet')

#numerator base files long ---------each row is a an animal or animal lact with diseases in wide format
disease_animal_wide<-read_parquet('data/intermediate_files/disease_animal_level_wide.parquet')

disease_lact_wide<-read_parquet('data/intermediate_files/disease_lactation_level_wide.parquet')

#---------------------------
data_pull_min<-min(animals$data_pull_date_min)
data_pull_max<-max(animals$data_pull_date_max)
```


# Gerard's Attempt - by lactation

```{r}
time_period_text<-'2023'
date_start <- ymd("2023-01-01")
date_end <- ymd("2023-12-31")


# to get cows with dates in window
deno <- animal_lactations |>
  select(id_animal, 
         id_animal_lact, 
         lact_number, lact_group, lact_group_basic,
         date_fresh, date_archive, date_archive_max) |> 
  # get cull date
  group_by(id_animal) |> 
  mutate(date_left = max(date_archive_max)) |> 
  ungroup() |> 
  # create 5 lact groupp
  mutate (lact_group_5 = case_when(
      (lact_number == 0) ~ 'Heifer', 
      (lact_number == 1) ~ 'LACT 1',
      (lact_number == 2) ~ 'LACT 2',
      (lact_number == 3) ~ 'LACT 3',
      (lact_number == 4) ~ 'LACT 4',
      (lact_number >4) ~ 'LACT 5+',
      .default = 'Unknown')
  ) |> 
  #this works for test, but we need to come back to it to see if can integrate into workflow
  mutate(time_period = time_period_text) |> 
  # removes heifers
  filter(lact_number>0) |>  
  # keeps cows with not culled or cows fresh before end
  # filter(is.na(date_left) & date_fresh <= date_end | date_fresh <= date_end) |> 
  filter(date_fresh <= date_end) |>
  filter(is.na(date_archive) | date_archive >=  date_start) |> 
  # filters cows fresh before start date
  filter(date_fresh <= date_start & date_archive >= date_start |
           date_fresh <= date_start & is.na(date_left) |
  # filters cows fresh after start date
    date_fresh >= date_start & date_archive <= date_end |
           date_fresh >= date_start & is.na(date_left)
         )

# summarize total
test_deno_total <- deno |> 
  group_by(time_period, id_animal) |>  
  # get rid of dup as only interested in total cows
  slice_tail() |> 
  ungroup() |> 
  group_by(time_period) |> 
  summarise(cows_total = n()) |> 
  mutate(lact_group = "Total") |> 
  ungroup()

# create lactation groups denominators
deno_all_lacts <- deno |> 
  group_by(time_period, lact_group_basic) |>  
  summarize(count_animals = n_distinct(id_animal), 
            count_lactations = n_distinct(id_animal_lact))|>
  ungroup()%>%
 rename(`Lactation Group` = lact_group_basic )

deno_by_lact_group <- deno |>
  group_by(time_period,  lact_group)|>
  summarize(count_animals = n_distinct(id_animal), 
            count_lactations = n_distinct(id_animal_lact)) |>
  ungroup() %>%
 rename(`Lactation Group` = lact_group)

# create more lact groups
deno_by_lact_group_5 <- deno |>
  group_by(time_period,  lact_group_5)|>
  summarize(count_animals = n_distinct(id_animal), 
            count_lactations = n_distinct(id_animal_lact)) |>
  ungroup() %>%
  rename('Lactation Group' = lact_group_5)

herd_deno <- bind_rows(deno_all_lacts, 
                  deno_by_lact_group, 
                  deno_by_lact_group_5) |> 
  distinct()

```

```{r}
# function for above to allow date range 

# data set create function
fxn_create_deno <- function(label,
                            date_start,
                            date_end){
# needs error checks  
  time_period_text <- label
date_start <- ymd(date_start)
date_end <- ymd(date_end)


# to get cows with dates in window
deno <- animal_lactations |>
  select(id_animal, 
         id_animal_lact, 
         lact_number, lact_group, lact_group_basic,
         date_fresh, date_archive, date_archive_max) |> 
  # get cull date
  group_by(id_animal) |> 
  mutate(date_left = max(date_archive_max)) |> 
  ungroup() |> 
  # create 5 lact groupp
  mutate (lact_group_5 = case_when(
      (lact_number == 0) ~ 'Heifer', 
      (lact_number == 1) ~ 'LACT 1',
      (lact_number == 2) ~ 'LACT 2',
      (lact_number == 3) ~ 'LACT 3',
      (lact_number == 4) ~ 'LACT 4',
      (lact_number >4) ~ 'LACT 5+',
      .default = 'Unknown')
  ) |> 
  #this works for test, but we need to come back to it to see if can integrate into workflow
  mutate(time_period = time_period_text) |> 
  # removes heifers
  filter(lact_number>0) |>  
  # keeps cows with not culled or cows fresh before end
  # filter(is.na(date_left) & date_fresh <= date_end | date_fresh <= date_end) |> 
  filter(date_fresh <= date_end) |>
  filter(is.na(date_archive) | date_archive >=  date_start) |> 
  # filters cows fresh before start date
  filter(date_fresh <= date_start & date_archive >= date_start |
           date_fresh <= date_start & is.na(date_left) |
  # filters cows fresh after start date
    date_fresh >= date_start & date_archive <= date_end |
           date_fresh >= date_start & is.na(date_left)
         )
}

denominators <- fxn_create_deno(label = "2021",
                        date_start = "2021-01-01",
                        date_end = "2021-12-31")
 
```


```{r}
# denon processing function

fxn_calc_deno <- function(data = denominators){
  
# create lactation groups denominators
deno_all_lacts <- data |> 
  group_by(time_period, lact_group_basic) |>  
  summarize(count_animals = n_distinct(id_animal), 
            count_lactations = n_distinct(id_animal_lact))|>
  ungroup()%>%
 rename(`Lactation Group` = lact_group_basic )

deno_by_lact_group <- data |>
  group_by(time_period,  lact_group)|>
  summarize(count_animals = n_distinct(id_animal), 
            count_lactations = n_distinct(id_animal_lact)) |>
  ungroup() %>%
 rename(`Lactation Group` = lact_group)

# create more lact groups
deno_by_lact_group_5 <- data |>
  group_by(time_period,  lact_group_5)|>
  summarize(count_animals = n_distinct(id_animal), 
            count_lactations = n_distinct(id_animal_lact)) |>
  ungroup() %>%
  rename('Lactation Group' = lact_group_5)

herd_deno <- bind_rows(deno_all_lacts, 
                  deno_by_lact_group, 
                  deno_by_lact_group_5) |> 
  distinct()

}

herd_deno <- fxn_calc_deno(denominators)

# can do multiple years or time periods by combining the above

denominators_yr1 <- fxn_create_deno(label = "2023",
                        date_start = "2023-01-01",
                        date_end = "2023-12-31") |> 
  fxn_calc_deno()

denominators_yr2 <- fxn_create_deno(label = "2024",
                        date_start = "2024-01-01",
                        date_end = "2024-12-31") |> 
  fxn_calc_deno()

deno_2yrs <- bind_rows(denominators_yr1, denominators_yr2)

ggplot(data = deno_2yrs, aes(x = `Lactation Group`, y = count_animals,
                             fill = `Lactation Group`))+
  geom_col()+
  scale_fill_viridis_d()+
  facet_wrap(vars(time_period))+
  theme_minimal()+
  theme(legend.position = "",
        axis.text.x = element_text(angle = 45, hjust = 1)
        )+
  labs(x = "")
  

```

# this needs work still

```{r}
# idea to get dim

# logic example

# test with 1 day
# create DIM end and start
# for end use archive or end date
# The create dim_cat from those by ceiling(dim/30)
# Then assign new variables using dim_cat using this logic
# for dim 0-30 example if start cat >=1 and end_cat>=1
# for dim 30-60  if start cat <=2 and end_cat>=2
# for dim 60-90  if start cat <=3 and end_cat>=3
# then repeat

date_start_dim <- ymd("2024-01-01")
date_end_dim <- ymd("2024-12-31")


# create dim data set
test_dim <- fxn_create_deno(label = "2024",
                        date_start = "2024-01-01",
                        date_end = "2024-12-31") |> 
  # calc start DIM's
  mutate(dim_start = as.numeric(case_when(date_fresh > date_start_dim ~ NA,
                               date_fresh < date_start_dim ~ 
                                 date_start_dim - date_fresh)
                               ),
         dim_end = as.numeric(case_when(is.na(date_archive)~ 
                                          date_end_dim - date_fresh,
                             .default = date_archive - date_fresh)
                             ),
         # needed as in calc above 0 isn't allowed in duration variables.
         dim_start = if_else(is.na(dim_start), 0, dim_start),
         dim_start_cat = ceiling(dim_start/30),
         dim_end_cat = ceiling(dim_end/30),
         dim_0_30 = if_else(dim_start_cat <= 1, 1, 0),
         dim_30_60 = if_else(dim_start_cat <= 2 & dim_end_cat >=2, 1, 0),
         dim_60_90 = if_else(dim_start_cat <= 3 & dim_end_cat >=3, 1, 0)
         )
```

```{r}
# chat gpt solution

# 13 categories gives upto 390
create_dim_categories <- function(data, 
                                  num_categories = 13, 
                                  interval = 30, 
                                  date_start,
                                  date_end) {
  # convert dates
  date_start <- ymd(date_start)
  date_end <- ymd(date_end)

  data <- data |> 
    mutate(dim_start = as.numeric(case_when(date_fresh > date_start ~ NA,
                                            date_fresh < date_start ~ 
                                              date_start - date_fresh)
                                  ),
           dim_end = as.numeric(case_when(is.na(date_archive)~ 
                                            date_end - date_fresh,
                                          .default = date_archive - date_fresh)
                                ),
           dim_start = if_else(is.na(dim_start), 0, dim_start),
           dim_start_cat = ceiling(dim_start / interval),
           dim_end_cat = ceiling(dim_end / interval)
    )
  
  # Generate `dim_` categories dynamically
  for (i in seq_len(num_categories)) {
    col_name <- paste0("dim_", (i-1) * interval, "_", i * interval)
    data <- data |> 
      mutate(!!col_name := if_else(dim_start_cat <= i & dim_end_cat >= i, 1, 0))
  }
  
  return(data)
}

# Usage example
test_dim <- fxn_create_deno(label = "2024",
                            date_start = "2024-01-01",
                            date_end = "2024-12-31") |> 
  create_dim_categories(num_categories = 13,
                        date_start = "2024-01-01",
                        date_end = "2024-12-31"
                        )  
```


<!-- # to get months -->

<!-- # idea -->

<!-- # extract month adn year from end and start and fresh and archive then write cod using year as group and month as case_whens. -->

<!-- # floor_date() -->

<!-- test_month <- test |> -->
<!--   select(id_animal, id_animal_lact, date_archive_max, lact_group) |> -->
<!--   mutate(January = 1, -->
<!--          February = case_when(is.na(date_archive_max) ~ 1, -->
<!--                              date_archive_max <= "2024-01-31" ~ 0, -->
<!--                              .default = 1), -->
<!--          March = case_when(is.na(date_archive_max) ~ 1, -->
<!--                              date_archive_max <= "2024-02-28" ~ 0, -->
<!--                              .default = 1) -->
<!--   ) -->


<!-- # summarize -->
<!-- test_summary_month <- test_month |> -->
<!--   summarise(across(January:March, ~ sum(. == 1, na.rm = TRUE))) |> -->
<!--   pivot_longer(cols = everything(), -->
<!--                names_to = "Month", -->
<!--                values_to = "Count") -->

<!-- test_summary_month_lact <- test_month |> -->
<!--   group_by(lact_group) |> -->
<!--   summarise(across(January:March, ~ sum(. == 1, na.rm = TRUE))) |> -->
<!--   ungroup() |> -->
<!--   pivot_longer(cols = -(lact_group), -->
<!--                names_to = "Month", -->
<!--                values_to = "Count") -->


<!-- ``` -->

