---
title: "Create Denominators"
format: html
editor: source
---

```{r}
library(tidyverse)
library(arrow)
library(dtplyr)

source('functions/DT_base.R')

```

```{r}
#denominator base files -------------------
animals<-read_parquet('data/intermediate_files/animals.parquet') #each row is an animal

animal_lactations<-read_parquet('data/intermediate_files/animal_lactations.parquet') #each row is an animal lactation

#numerator base files long ----------------------each row is a unique disease event (gapx_key)
disease_animal_long<-read_parquet('data/intermediate_files/disease_animal_level_long.parquet')

disease_lact_long<-read_parquet('data/intermediate_files/disease_lactation_level_long.parquet')

#numerator base files long ---------each row is a an animal or animal lact with diseases in wide format
disease_animal_wide<-read_parquet('data/intermediate_files/disease_animal_level_wide.parquet')

disease_lact_wide<-read_parquet('data/intermediate_files/disease_lactation_level_wide.parquet')

#---------------------------
data_pull_min<-min(animals$data_pull_date_min)
data_pull_max<-max(animals$data_pull_date_max)
```



```{r}
calendar<-tibble(date_calendar = seq.Date(from = data_pull_max-1200, to = data_pull_max, by = 1))

deno_base<-animal_lactations |> 
  left_join(animals) |> 
  group_by(id_animal) |> 
  mutate(
    date_first_fresh = case_when(
      (lact_number == 0)~mdy(NA), 
      TRUE~min(date_fresh, na.rm = T)), 
    
    date_last_fresh = case_when(
      (lact_number == 0)~mdy(NA), 
      TRUE~max(date_fresh, na.rm = T)),
    
    lact_number_max = max(lact_number, na.rm = T)) |> 
  ungroup() |> 
  
  mutate(
    date_elig_start = case_when(
      lact_number >0~date_fresh, 
      lact_number == 0~date_birth, 
      TRUE~data_pull_min), 
    
    date_elig_end = case_when(
      is.na(date_archive)~data_pull_max, 
      TRUE~date_archive)
    )

sk_deno<-skimr::skim(deno_base)


test<-deno_base%>%
  filter(lact_number == 0)%>%
  select(id_animal, id_animal_lact, date_birth, lact_number, lact_number_max, date_fresh, date_sold, date_died, date_archive, date_elig_start, date_elig_end)

```


```{r, message = FALSE}

deno_dataframe<-NULL
#i = 1199
for (i in seq_along(calendar$date_calendar)){
  
  df<-deno_base%>%
    #test%>%
    mutate(date_ref = calendar$date_calendar[[i]])%>%
    mutate(eligible = case_when(
      ((date_elig_start<=date_ref)&(date_elig_end>=date_ref))~'eligible', 
      TRUE~'not eligiible'
    ))
  
  df2<-df%>%
    group_by(lact_group_basic, date_ref, eligible) |> 
    summarize(ct_animals = n_distinct(id_animal))%>%
    ungroup() |> 
    rename(`Lactation Group` = lact_group_basic)
  
  df3<-df%>%
    group_by(lact_group, date_ref, eligible) |> 
    summarize(ct_animals = n_distinct(id_animal))%>%
    ungroup()|> 
    rename(`Lactation Group` = lact_group)
  
  df4<-bind_rows(df2, df3)%>%
    distinct()
  
  deno_dataframe <-bind_rows(deno_dataframe, df2) 
    
}
  




```

```{r}

test_animal<-read_parquet('data/intermediate_files/events_formatted.parquet')%>%
  filter(id_animal %in% '233349_04/30/22')

check_fresh<-read_parquet('data/intermediate_files/events_formatted.parquet')%>%
  filter(event %in% 'FRESH')%>%
  mutate(floordate_month = floor_date(date_event, unit = 'month'))

check_left<-read_parquet('data/intermediate_files/events_formatted.parquet')%>%
  filter(event %in% c('SOLD', 'DIED'))%>%
  mutate(floordate_month = floor_date(date_event, unit = 'month'))

ggplot(check_fresh)+
  geom_bar(aes(x = floordate_month, fill = lact_group))+
  facet_grid(.~lact_group)

ggplot(check_left)+
  geom_bar(aes(x = floordate_month, fill = lact_group))+
  facet_grid(lact_group~., scales = 'free')


ggplot(deno_dataframe%>%filter(eligible %in% 'eligible'))+
  geom_point(aes(x = date_ref, y = ct_animals, color = `Lactation Group`))

```




# Gerard's Attempt - by lactation

```{r}
time_period_text<-'2024'
date_start <- ymd("2024-01-01")
date_end <- ymd("2024-12-31")

# to get cows with dates in window
test <- animal_lactations |>
  mutate(time_period = time_period_text) |> #this works for test, but we need to come back to it to see if can integrate into workflow
  filter(lact_number>0) |>  # removes heifers
  filter(date_archive <= date_end | is.na(date_archive)) |> #what about active cows? their date_archive is NA. also we want to use date_archive here.  date_archive_max isn't what you intuitively think it is. it is the max date_archive for this lactation, not for the cow.  I know it doesn't make sense but it happens, and if you don't use stuff like that you end up creating imaginary cows with joins.
  # filters cows fresh before start date
  filter(date_fresh<= date_start & date_archive_max >= date_start |
           date_fresh<= date_start & is.na(date_archive_max) |
  # filters cows fresh after start date
    date_fresh >= date_start & date_archive_max <= date_end|
           date_fresh >= date_start & is.na(date_archive_max)
         )

# summarize total
test_deno_total <- test |> 
  group_by(time_period, id_animal) |>  
  # get rid of dup as only interested in total cows
  slice_tail() |> 
  ungroup() |> 
  group_by(time_period) |> 
  summarise(cows_total = n()) |> 
  mutate(lact_group = "Total")

#Nora's attempt - should be the same as Gerard's values
deno_all_lacts <- test |> 
  group_by(time_period, lact_group_basic) |>  
  summarize(count_animals = n_distinct(id_animal), 
            count_lactations = n_distinct(id_animal_lact))|>
  ungroup()%>%
 rename(`Lactation Group` = lact_group_basic )

deno_by_lact_group<-test|>
  group_by(time_period,  lact_group)|>
  summarize(count_animals = n_distinct(id_animal), 
            count_lactations = n_distinct(id_animal_lact)) |>
  ungroup()%>%
 rename(`Lactation Group` = lact_group)

deno_nora<-bind_rows(deno_all_lacts, deno_by_lact_group)



# by lact this won't equal totals due to multiple lact within year
test_deno_total_lact <- test |> 
  group_by(time_period, lact_group) |> 
  summarise(cows_total = n()) |> 
  ungroup()


         
test_sum <- bind_rows(test_deno_total, test_deno_total_lact) 

waldo::compare(test_deno_total_lact, test_deno_total_ns)


```


```{r}
# to get months

test_month <- test |> 
  select(id_animal, id_animal_lact, date_archive_max, lact_group) |> 
  mutate(January = 1,
         February = case_when(is.na(date_archive_max) ~ 1,
                             date_archive_max <= "2024-01-31" ~ 0,
                             .default = 1),
         March = case_when(is.na(date_archive_max) ~ 1,
                             date_archive_max <= "2024-02-28" ~ 0,
                             .default = 1)
  ) 


# summarize
test_summary_month <- test_month |> 
  summarise(across(January:March, ~ sum(. == 1, na.rm = TRUE))) |> 
  pivot_longer(cols = everything(),
               names_to = "Month",
               values_to = "Count")

test_summary_month_lact <- test_month |> 
  group_by(lact_group) |> 
  summarise(across(January:March, ~ sum(. == 1, na.rm = TRUE))) |> 
  ungroup() |> 
  pivot_longer(cols = -(lact_group),
               names_to = "Month",
               values_to = "Count")


```

